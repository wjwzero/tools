package ${myUtil.packageName}.controller;

import ${myUtil.packageName}.domain.entity.${myUtil.entityClassName}DO;
import ${myUtil.packageName}.domain.vo.${myUtil.voClassName};
import ${myUtil.packageName}.service.${myUtil.entityClassName}Service;
import com.tools.report.controller.api.${myUtil.entityClassName}Api;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.tools.common.basic.AbstractController;

import javax.annotation.Resource;
import java.util.List;

@RestController
@RequestMapping("/${myUtil.entityName}")
public class ${myUtil.entityClassName}Controller extends AbstractController implements ${myUtil.entityClassName}Api{
    private Logger logger = LoggerFactory.getLogger(${myUtil.entityClassName}Controller.class);

    @Resource
    private ${myUtil.entityClassName}Service ${myUtil.entityName}Service;

    @Override
    @RequestMapping(value = "/getById",method = RequestMethod.GET)
    public ResponseEntity getById(<%
        for(attr in myUtil.list){
            if(attr.name == "id")
                print(attr.type);
        }
    %> id){

        ${myUtil.voClassName} result = convert(${myUtil.entityName}Service.getById(id),${myUtil.voClassName}.class);
        return ResponseEntity.ok().contentType(MediaType.APPLICATION_JSON).body(result);
    }

 <% for(attr in myUtil.list){
       if(attr.isIndex == true&&attr.name!='id'){  %>
    @Override
    @RequestMapping(value = "/getBy${attr.upperCamelCaseName}",method = RequestMethod.GET)
    public ResponseEntity getBy${attr.upperCamelCaseName}(${attr.type} ${attr.camelCaseName}){
        ${myUtil.voClassName} result = convert(${myUtil.entityName}Service.getBy${attr.upperCamelCaseName}(${attr.camelCaseName}),${myUtil.voClassName}.class);
        return ResponseEntity.ok().contentType(MediaType.APPLICATION_JSON).body(result);
    }
   <%   }
    } %>

    @Override
    @RequestMapping(value = "/getAll",method = RequestMethod.GET)
    public ResponseEntity getAll(){
        List<${myUtil.entityClassName}DO> result = ${myUtil.entityName}Service.getAll();
        return ResponseEntity.ok().contentType(MediaType.APPLICATION_JSON).body(result);
    }

    @Override
    @RequestMapping(value = "/insert",method = RequestMethod.POST)
    public ResponseEntity insert(${myUtil.voClassName} ${myUtil.entityName}){
        ${myUtil.entityClassName}DO ${myUtil.entityName}DO = convert(${myUtil.entityName},${myUtil.entityClassName}DO.class);
        Integer result = ${myUtil.entityName}Service.insert(${myUtil.entityName}DO);
        return ResponseEntity.ok().contentType(MediaType.APPLICATION_JSON).body(result);
    }

    @Override
    @RequestMapping(value = "/deleteById",method = RequestMethod.DELETE)
    public ResponseEntity deleteById(<%
        for(attr in myUtil.list){
            if(attr.name == "id")
                print(attr.type);
        }
    %> id){

        Integer result = ${myUtil.entityName}Service.deleteById(id);
        return ResponseEntity.ok().contentType(MediaType.APPLICATION_JSON).body(result);
    }

    @Override
    @RequestMapping(value = "/update",method = RequestMethod.PUT)
    public ResponseEntity update(${myUtil.voClassName} ${myUtil.entityName}){
        ${myUtil.entityClassName}DO ${myUtil.entityName}DO = convert(${myUtil.entityName},${myUtil.entityClassName}DO.class);
        Integer result = ${myUtil.entityName}Service.update(${myUtil.entityName}DO);
        return ResponseEntity.ok().contentType(MediaType.APPLICATION_JSON).body(result);
    }

}
